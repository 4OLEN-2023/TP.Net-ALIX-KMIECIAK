<!--Déclaration d'un fenêtre (Window)
xnlns = Définit un espace de noms qualifiés pour xaml éléments spécifiques
xnlns:x = Espace de nom renomé "x" pour des raisons de lisibilité
Avec déclaration du namespace et ajout des éléments externes à utiliser via la syntaxe XMl-->
<Window x:Class="MyVideoGames.WPFUI.Windows.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="800">
    <!-- Ci-dessus, définition du titre et de la taille de la fenêtre-->

    <!--Déclaration des resources nécessaire à la fenêtre (ici nous déclarons un converter pour faciliter l'affichage
    Voir Converter/BooleanToVisibilityConverter.cs
    Permet de transformer un boolean en un attribut de visibilité-->
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    </Window.Resources>

    <!--Ouverture d'un StackPanel, Element permettant d'empiler verticallement ou horizontallement des élements-->
    <StackPanel Orientation="Vertical" Grid.IsSharedSizeScope="True">
        <!--Ouverture d'un Grid (tableau)-->
        <Grid Margin="10">
            <!--Définiition des colonnes du Grid-->
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" SharedSizeGroup="Label" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!--Définition d'une ligne dans le Grid-->
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <!--Première colonne: ajout d'un label-->
            <Label Grid.Row="0"
                   Grid.Column="0"
                   Margin="0,0,0,10" Height="26" VerticalAlignment="Bottom">
                Game Name Search:
            </Label>
            <!--Deuxieme colonne: ajout d'une textBox pour permettre la saisie
            Liaison au champ "GameName" du ViewModel via le binding
            Mise à jour de l'affichge lorsque la propriété change (valeurs possibles : PropertyChanges, LostFocus, Explicit)
            Voir doc : https://docs.microsoft.com/fr-fr/dotnet/api/system.windows.data.binding.updatesourcetrigger -->
            <TextBox Grid.Row="0"
                     Grid.Column="1"
                     VerticalContentAlignment="Center"
                     Margin="0,0,0,10"
                     Text="{Binding GameName, UpdateSourceTrigger=PropertyChanged}" />
            <!--Troisième colonne, Ajout d'un bouton permettant de déclencher la recherche
            Liaison à une commande du ViewModel (voir Commands/FilterByCardNumberCommand.cs)-->
            <Button Grid.Row="0"
                    Grid.Column="2"
                    Width="50"
                    Margin="10,0,10,10"
                    Content="Filter"
                    Command="{Binding FilterByGameNameCommand}" />
        </Grid>
        <!--Nouvelle grille permettant d'afficher les résultats-->
        <Grid Margin="10 0 10 10" HorizontalAlignment="Center">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!--Label affichant qu'il n'y a pas de résultat
            Liaison à un boolean qui gère l'affichage (visibilité)
            Transformation du boolean en attribut de visibilité via un Converter
             Voir Converter/BooleanToVisibilityConverter.cs -->
            <Label Grid.Row="0"
                   Grid.Column="0"
                   Margin="0,0,0,10"
                      Visibility="{Binding ShowNoResult, Converter={StaticResource BooleanToVisibilityConverter}}">
                Empty search or no result found.
            </Label>
            <!--Déclaration d'un Data Grid lié à la propriété "GameList" du ViewModel
            Liaison à un boolean qui gère l'affichage (visibilité) via un converter-->
            <DataGrid HorizontalAlignment="center"
                      VerticalAlignment="Stretch"
                      VerticalScrollBarVisibility="Auto"
                      HorizontalScrollBarVisibility="Auto"
                      Height="Auto"
                      RowHeight="30"
                      ColumnWidth="100"
                      ItemsSource="{Binding GameList}"
                      Visibility="{Binding ShowGrid, Converter={StaticResource BooleanToVisibilityConverter}}"
                      AutoGenerateColumns="False">
                <!--Déclaration du style pour les cellules de notre tableau-->
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell">
                        <Setter Property="TextBlock.TextAlignment" Value="Center" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type DataGridCell}">
                                    <Grid Background="{TemplateBinding Background}">
                                        <ContentPresenter VerticalAlignment="Center" />
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </DataGrid.CellStyle>

                <!--Déclaration des colonnes qui seront présentes dans le tableau
                Liaison via le Binding aux propriétés contenues dans les objets de "Gamelist"
                Voir ViewModels/MainWindowViewModel.cs
                et ViewModel/GameListItemViewModel.cs-->
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Id" MinWidth="135" Width="Auto" Binding="{Binding Id}" />
                    <DataGridTextColumn Header="Name" MinWidth="135" Width="Auto" Binding="{Binding Name}" />
                    <DataGridTextColumn Header="Description" MinWidth="135" Width="Auto" Binding="{Binding Description}" />
                    <DataGridTextColumn Header="Release date" MinWidth="135" Width="Auto" Binding="{Binding ReleaseDate, StringFormat=\{0:dd.MM.yyyy\}}" />
                    <DataGridTextColumn Header="Rating" MinWidth="135" Width="Auto" Binding="{Binding Rating}" />
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
    </StackPanel>
</Window>